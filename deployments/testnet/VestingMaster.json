{
  "address": "0xd6BdC3E9D527DF810EeebA9c55D952A979F445b1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedPeriodAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vestingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedPeriodAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "core_",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userLockedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe744aee293bf7727a5e7cb5c6a013c124d263adf370f89cadffbca205332e0f2",
  "receipt": {
    "to": null,
    "from": "0x1904BFcb93EdC9BF961Eead2e5c0de81dCc1D37D",
    "contractAddress": "0xd6BdC3E9D527DF810EeebA9c55D952A979F445b1",
    "transactionIndex": 12,
    "gasUsed": "1496009",
    "logsBloom": "0x
    "blockHash": "0x539a52105440a1330b9d581aa33a05687691b038b946050a1297f1c5c4c42f32",
    "transactionHash": "0xe744aee293bf7727a5e7cb5c6a013c124d263adf370f89cadffbca205332e0f2",
    "logs": [],
    "blockNumber": 15255031,
    "cumulativeGasUsed": "5368747",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D10F7f0fddBCb9285492A3c3B6b342d18aCB7f7",
    259200,
    60,
    "0x14D00c80B1A8bba29AceD2e3464d5c720a918080"
  ],
  "solcInputHash": "63dcc0a66e9db91f7f7c0cc5c143cba2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedPeriodAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vestingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPeriodAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"core_\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity/VestingMaster.sol\":\"VestingMaster\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x212fb1b1d4beaf74354dad9bc329f44ee3c5375ef1c32acff76b4ecefc10f1d8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/core/CoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../interfaces/ICoreRef.sol\\\";\\n\\nabstract contract CoreRef is ICoreRef, Pausable {\\n\\n    ICore private _core;\\n\\n    constructor(address core_) public {\\n        _core = ICore(core_);\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender),\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGuardianOrGovernor() {\\n        require(\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFarm() {\\n        require(\\n            _core.isFarm(msg.sender),\\n            \\\"CoreRef::onlyFarm: Caller is not a farm\\\"\\n        );\\n        _;\\n    }\\n\\n    function setCore(address core_) public override onlyGovernor {\\n        _core = ICore(core_);\\n        emit CoreUpdate(core_);\\n    }\\n\\n    function pause() public override onlyGuardianOrGovernor {\\n        _pause();\\n    }\\n\\n    function unpause() public override onlyGuardianOrGovernor {\\n        _unpause();\\n    }\\n\\n    function core() public view override returns (address) {\\n        return address(_core);\\n    }\\n\\n    function token() public view override returns (address) {\\n        return _core.token();\\n    }\\n}\\n\",\"keccak256\":\"0x1b06aa189ea11e6643df1dab50086b771d56bc4c7dc526fbd1c9add2fa850c66\",\"license\":\"MIT\"},\"contracts/interfaces/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPermissions.sol\\\";\\n\\ninterface ICore is IPermissions {\\n    event TokenUpdate(address _token);\\n\\n    function token() external view returns (address);\\n\\n    function setToken(address _token) external;\\n}\",\"keccak256\":\"0xf9320f6f673f528fe25b63838860bdf0764ed5b4bbce7a7fe52934fd2472220a\",\"license\":\"MIT\"},\"contracts/interfaces/ICoreRef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICoreRef {\\n    event CoreUpdate(address indexed _core);\\n\\n    function setCore(address core_) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function core() external view returns (address);\\n\\n    function token() external view returns (address);\\n}\",\"keccak256\":\"0xfcd12f44698e65ab49f6366253ad1cd96d9a18fe7cd9706cf7b929837b8ba065\",\"license\":\"MIT\"},\"contracts/interfaces/IPermissions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IPermissions {\\n\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\n\\n    function grantGovernor(address governor) external;\\n\\n    function grantGuardian(address guardian) external;\\n\\n    function grantFarm(address farm) external;\\n\\n    function revokeGovernor(address governor) external;\\n\\n    function revokeGuardian(address guardian) external;\\n\\n    function revokeFarm(address farm) external;\\n\\n    function revokeOverride(bytes32 role, address account) external;\\n\\n    function isGovernor(address _address) external view returns (bool);\\n\\n    function isGuardian(address _address) external view returns (bool);\\n\\n    function isFarm(address _address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcae86e91c2d94eb84189792cbe0296d512941c21a3a2bc7b948773deda59eed4\",\"license\":\"MIT\"},\"contracts/interfaces/IVestingMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVestingMaster {\\n    struct LockedReward {\\n        uint256 locked;\\n        uint256 timestamp;\\n    }\\n    // ----------- Events -----------\\n\\n    event Lock(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n\\n    // ----------- Farms only State changing api -----------\\n\\n    function lock(address, uint256) external;\\n\\n    // ----------- state changing API -----------\\n\\n    function claim() external;\\n\\n    // ----------- Getters -----------\\n\\n    function period() external view returns (uint256);\\n\\n    function lockedPeriodAmount() external view returns (uint256);\\n\\n    function vestingToken() external view returns (IERC20);\\n\\n    function userLockedRewards(address account, uint256 idx)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function totalLockedRewards() external view returns (uint256);\\n\\n    function getVestingAmount() external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x690873a829462905ccfb11b3a16b20b3103f36025960bbfd4cd10e149e2f9c78\",\"license\":\"MIT\"},\"contracts/liquidity/VestingMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IVestingMaster.sol\\\";\\nimport \\\"../interfaces/ICore.sol\\\";\\nimport \\\"../core/CoreRef.sol\\\";\\n\\ncontract VestingMaster is IVestingMaster, ReentrancyGuard, CoreRef {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public override vestingToken;\\n\\n    mapping(address => LockedReward[]) public override userLockedRewards;\\n\\n    uint256 public immutable override period;\\n\\n    uint256 public immutable override lockedPeriodAmount;\\n\\n    uint256 public override totalLockedRewards;\\n\\n    constructor(\\n        address _core,\\n        uint256 _period,\\n        uint256 _lockedPeriodAmount,\\n        address _vestingToken\\n    ) public CoreRef(_core) {\\n        require(\\n            _vestingToken != address(0),\\n            \\\"VestingMaster::constructor: Zero address\\\"\\n        );\\n        require(_period > 0, \\\"VestingMaster::constructor: Period zero\\\");\\n        require(\\n            _lockedPeriodAmount > 0,\\n            \\\"VestingMaster::constructor: Period amount zero\\\"\\n        );\\n        vestingToken = IERC20(_vestingToken);\\n        period = _period;\\n        lockedPeriodAmount = _lockedPeriodAmount;\\n    }\\n\\n    function lock(address account, uint256 amount) public override onlyFarm {\\n        LockedReward[] memory oldLockedRewards = userLockedRewards[account];\\n        uint256 currentTimestamp = block.timestamp;\\n        LockedReward memory lockedReward;\\n        uint256 claimableAmount;\\n        for (uint256 i = 0; i < oldLockedRewards.length; i++) {\\n            lockedReward = oldLockedRewards[i];\\n            if (currentTimestamp >= lockedReward.timestamp) {\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\n                delete oldLockedRewards[i];\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        uint256 newStartTimestamp = (currentTimestamp / period) * period;\\n        uint256 newTimestamp;\\n        LockedReward memory newLockedReward;\\n        uint256 jj = 0;\\n        delete userLockedRewards[account];\\n        if (claimableAmount > 0) {\\n            userLockedRewards[account].push(\\n                LockedReward({\\n                    locked: claimableAmount,\\n                    timestamp: newStartTimestamp\\n                })\\n            );\\n        }\\n        for (uint256 i = 0; i < lockedPeriodAmount; i++) {\\n            newTimestamp = newStartTimestamp.add((i + 1) * period);\\n            uint256 locked;\\n            if (amount.div(lockedPeriodAmount) == 0) {\\n                locked = i == 0 ? amount : 0;\\n            } else if (amount.mod(lockedPeriodAmount) > 0) {\\n                locked = i == 0\\n                    ? amount.div(lockedPeriodAmount).add(\\n                        amount.mod(lockedPeriodAmount)\\n                    )\\n                    : amount.div(lockedPeriodAmount);\\n            } else {\\n                locked = amount.div(lockedPeriodAmount);\\n            }\\n            newLockedReward = LockedReward({\\n                locked: locked,\\n                timestamp: newTimestamp\\n            });\\n            for (uint256 j = jj; j < oldLockedRewards.length; j++) {\\n                lockedReward = oldLockedRewards[j];\\n                if (lockedReward.timestamp == newTimestamp) {\\n                    newLockedReward.locked = newLockedReward.locked.add(\\n                        lockedReward.locked\\n                    );\\n                    jj = j + 1;\\n                    break;\\n                }\\n            }\\n            if (newLockedReward.locked > 0) {\\n                userLockedRewards[account].push(newLockedReward);\\n            }\\n        }\\n        totalLockedRewards = totalLockedRewards.add(amount);\\n        emit Lock(account, amount);\\n    }\\n\\n    function claim() public override {\\n        LockedReward[] storage lockedRewards = userLockedRewards[msg.sender];\\n        uint256 currentTimestamp = block.timestamp;\\n        LockedReward memory lockedReward;\\n        uint256 claimableAmount;\\n        for (uint256 i = 0; i < lockedRewards.length; i++) {\\n            lockedReward = lockedRewards[i];\\n            if (currentTimestamp >= lockedReward.timestamp) {\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\n                delete lockedRewards[i];\\n            } else {\\n                break;\\n            }\\n        }\\n        totalLockedRewards = totalLockedRewards.sub(claimableAmount);\\n        _safeTransfer(msg.sender, claimableAmount);\\n        emit Claim(msg.sender, claimableAmount);\\n    }\\n\\n    function getVestingAmount()\\n        public\\n        view\\n        override\\n        returns (uint256 lockedAmount, uint256 claimableAmount)\\n    {\\n        LockedReward[] memory lockedRewards = userLockedRewards[msg.sender];\\n        uint256 currentTimestamp = block.timestamp;\\n        LockedReward memory lockedReward;\\n        for (uint256 i = 0; i < lockedRewards.length; i++) {\\n            lockedReward = lockedRewards[i];\\n            if (currentTimestamp >= lockedReward.timestamp) {\\n                claimableAmount = claimableAmount.add(lockedReward.locked);\\n            } else {\\n                lockedAmount = lockedAmount.add(lockedReward.locked);\\n            }\\n        }\\n    }\\n\\n    function _safeTransfer(address _to, uint256 _amount) internal virtual {\\n        vestingToken.safeTransfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x55c07ed06d5e6f27248efe542f8590fbf6099749a29875a1a9065196f3409e68\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b8938038062001b8983398101604081905262000034916200011d565b6001600081905580546001600160a01b03808716610100026001600160a81b0319909216919091179091558116620000895760405162461bcd60e51b81526004016200008090620001a6565b60405180910390fd5b60008311620000ac5760405162461bcd60e51b81526004016200008090620001ee565b60008211620000cf5760405162461bcd60e51b8152600401620000809062000169565b600280546001600160a01b0319166001600160a01b039290921691909117905560809190915260a0525062000224565b80516001600160a01b03811681146200011757600080fd5b92915050565b6000806000806080858703121562000133578384fd5b6200013f8686620000ff565b935060208501519250604085015191506200015e8660608701620000ff565b905092959194509250565b6020808252602e9082015260008051602062001b6983398151915260408201526d6f6420616d6f756e74207a65726f60901b606082015260800190565b60208082526028908201527f56657374696e674d61737465723a3a636f6e7374727563746f723a205a65726f604082015267206164647265737360c01b606082015260800190565b602080825260279082015260008051602062001b698339815191526040820152666f64207a65726f60c81b606082015260800190565b60805160a0516118ef6200027a600039806101c252806104ca5280610529528061056f52806105a552806105d7528061060152806106315250806103de52806103ff52806104fa5280610e0752506118ef6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c5780638456cb59116100665780638456cb59146101a0578063ef78d4fd146101a8578063f2f4eb26146101b0578063fc0c546a146101b8576100ea565b80635c975abb1461017057806363a44f1214610185578063800096301461018d576100ea565b806329da27f2116100c857806329da27f2146101375780633f4ba83a146101585780633f57faa9146101605780634e71d92d14610168576100ea565b806305e97bc6146100ef57806319d152fa1461010d578063282d3fdf14610122575b600080fd5b6100f76101c0565b6040516101049190611850565b60405180910390f35b6101156101e4565b6040516101049190611435565b6101356101303660046113ce565b610200565b005b61014a6101453660046113ce565b610785565b604051610104929190611859565b6101356107be565b61014a61093e565b610135610a28565b610178610b3c565b604051610104919061147c565b6100f7610b45565b61013561019b366004611396565b610b4b565b610135610c87565b6100f7610e05565b610115610e29565b610115610e4a565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6001546040517f637012c700000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063637012c79061025a903390600401611435565b60206040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa91906113f9565b6102cf5760405162461bcd60e51b81526004016102c69061175f565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561035a57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610314565b505050509050600042905061036d611339565b6000805b84518110156103d95784818151811061038657fe5b60200260200101519250826020015184106103cc5782516103a8908390610eef565b91508481815181106103b657fe5b602002602001016103c5611339565b90526103d1565b6103d9565b600101610371565b5060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858161042657fe5b040290506000610434611339565b73ffffffffffffffffffffffffffffffffffffffff891660009081526003602052604081206104639082611353565b84156104c55773ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083208151808301909252888252818301888152815460018181018455928652939094209151600290930290910191825591519101555b60005b7f00000000000000000000000000000000000000000000000000000000000000008110156107185761051f85600183017f000000000000000000000000000000000000000000000000000000000000000002610eef565b9350600061054d8b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b61056757811561055e576000610560565b8a5b9050610658565b60006105938c7f0000000000000000000000000000000000000000000000000000000000000000610f4d565b111561062b5781156105ce576105c98b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b610560565b6105606105fb8c7f0000000000000000000000000000000000000000000000000000000000000000610f4d565b6106258d7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b90610eef565b6106558b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b90505b60408051808201909152818152602081018690529350825b8a518110156106bd578a818151811061068557fe5b6020026020010151985085896020015114156106b557885185516106a891610eef565b85526001810193506106bd565b600101610670565b5083511561070f5773ffffffffffffffffffffffffffffffffffffffff8c1660009081526003602090815260408220805460018181018355918452928290208751600290940201928355908601519101555b506001016104c8565b50600454610726908a610eef565b60045560405173ffffffffffffffffffffffffffffffffffffffff8b16907f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d42790610771908c90611850565b60405180910390a250505050505050505050565b6003602052816000526040600020818154811061079e57fe5b600091825260209091206002909102018054600190910154909250905082565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610818903390600401611435565b60206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906113f9565b8061091857506001546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba21906108c8903390600401611435565b60206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091891906113f9565b6109345760405162461bcd60e51b81526004016102c6906116dc565b61093c610f7f565b565b33600090815260036020908152604080832080548251818502810185019093528083528493606093929190859084015b828210156109b45783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061096e565b50505050905060004290506109c7611339565b60005b8351811015610a20578381815181106109df57fe5b6020026020010151915081602001518310610a08578151610a01908690610eef565b9450610a18565b8151610a15908790610eef565b95505b6001016109ca565b505050509091565b33600090815260036020526040902042610a40611339565b6000805b8454811015610acd57848181548110610a5957fe5b600091825260209182902060408051808201909152600290920201805482526001015491810182905293508410610ac0578251610a97908390610eef565b9150848181548110610aa557fe5b60009182526020822060029091020181815560010155610ac5565b610acd565b600101610a44565b50600454610adb908261100b565b600455610ae83382611033565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610b2e9190611850565b60405180910390a250505050565b60015460ff1690565b60045481565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610ba5903390600401611435565b60206040518083038186803b158015610bbd57600080fd5b505afa158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf591906113f9565b610c115760405162461bcd60e51b81526004016102c690611546565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610ce1903390600401611435565b60206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906113f9565b80610de157506001546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610d91903390600401611435565b60206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de191906113f9565b610dfd5760405162461bcd60e51b81526004016102c6906116dc565b61093c61105b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600154610100900473ffffffffffffffffffffffffffffffffffffffff1690565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906113b2565b905090565b600082820183811015610f145760405162461bcd60e51b81526004016102c69061150f565b9392505050565b6000808211610f3c5760405162461bcd60e51b81526004016102c690611637565b818381610f4557fe5b049392505050565b6000808211610f6e5760405162461bcd60e51b81526004016102c6906116a5565b818381610f7757fe5b069392505050565b610f87610b3c565b610fa35760405162461bcd60e51b81526004016102c6906114d8565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610ff46110cf565b6040516110019190611435565b60405180910390a1565b60008282111561102d5760405162461bcd60e51b81526004016102c6906115a3565b50900390565b6002546110579073ffffffffffffffffffffffffffffffffffffffff1683836110d3565b5050565b611063610b3c565b156110805760405162461bcd60e51b81526004016102c69061166e565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ff45b3390565b6111748363a9059cbb60e01b84846040516024016110f2929190611456565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611179565b505050565b60606111db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112159092919063ffffffff16565b80519091501561117457808060200190518101906111f991906113f9565b6111745760405162461bcd60e51b81526004016102c6906117f3565b6060611224848460008561122c565b949350505050565b60608247101561124e5760405162461bcd60e51b81526004016102c6906115da565b611257856112fa565b6112735760405162461bcd60e51b81526004016102c6906117bc565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161129d9190611419565b60006040518083038185875af1925050503d80600081146112da576040519150601f19603f3d011682016040523d82523d6000602084013e6112df565b606091505b50915091506112ef828286611300565b979650505050505050565b3b151590565b6060831561130f575081610f14565b82511561131f5782518084602001fd5b8160405162461bcd60e51b81526004016102c69190611487565b604051806040016040528060008152602001600081525090565b50805460008255600202906000526020600020908101906113749190611377565b50565b5b808211156113925760008082556001820155600201611378565b5090565b6000602082840312156113a7578081fd5b8135610f1481611897565b6000602082840312156113c3578081fd5b8151610f1481611897565b600080604083850312156113e0578081fd5b82356113eb81611897565b946020939093013593505050565b60006020828403121561140a578081fd5b81518015158114610f14578182fd5b6000825161142b818460208701611867565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526114a6816040850160208701611867565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526018908201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604082015260600190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f436f72655265663a3a6f6e6c794661726d3a2043616c6c6572206973206e6f7460408201527f2061206661726d00000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b918252602082015260400190565b60005b8381101561188257818101518382015260200161186a565b83811115611891576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461137457600080fdfea26469706673582212206c53ad76e8604496e65af05c9743e9f4aa9dea1d730038d696485f53978a251a64736f6c634300060c003356657374696e674d61737465723a3a636f6e7374727563746f723a2050657269",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c5780638456cb59116100665780638456cb59146101a0578063ef78d4fd146101a8578063f2f4eb26146101b0578063fc0c546a146101b8576100ea565b80635c975abb1461017057806363a44f1214610185578063800096301461018d576100ea565b806329da27f2116100c857806329da27f2146101375780633f4ba83a146101585780633f57faa9146101605780634e71d92d14610168576100ea565b806305e97bc6146100ef57806319d152fa1461010d578063282d3fdf14610122575b600080fd5b6100f76101c0565b6040516101049190611850565b60405180910390f35b6101156101e4565b6040516101049190611435565b6101356101303660046113ce565b610200565b005b61014a6101453660046113ce565b610785565b604051610104929190611859565b6101356107be565b61014a61093e565b610135610a28565b610178610b3c565b604051610104919061147c565b6100f7610b45565b61013561019b366004611396565b610b4b565b610135610c87565b6100f7610e05565b610115610e29565b610115610e4a565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6001546040517f637012c700000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063637012c79061025a903390600401611435565b60206040518083038186803b15801561027257600080fd5b505afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa91906113f9565b6102cf5760405162461bcd60e51b81526004016102c69061175f565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561035a57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610314565b505050509050600042905061036d611339565b6000805b84518110156103d95784818151811061038657fe5b60200260200101519250826020015184106103cc5782516103a8908390610eef565b91508481815181106103b657fe5b602002602001016103c5611339565b90526103d1565b6103d9565b600101610371565b5060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858161042657fe5b040290506000610434611339565b73ffffffffffffffffffffffffffffffffffffffff891660009081526003602052604081206104639082611353565b84156104c55773ffffffffffffffffffffffffffffffffffffffff8a1660009081526003602090815260408083208151808301909252888252818301888152815460018181018455928652939094209151600290930290910191825591519101555b60005b7f00000000000000000000000000000000000000000000000000000000000000008110156107185761051f85600183017f000000000000000000000000000000000000000000000000000000000000000002610eef565b9350600061054d8b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b61056757811561055e576000610560565b8a5b9050610658565b60006105938c7f0000000000000000000000000000000000000000000000000000000000000000610f4d565b111561062b5781156105ce576105c98b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b610560565b6105606105fb8c7f0000000000000000000000000000000000000000000000000000000000000000610f4d565b6106258d7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b90610eef565b6106558b7f0000000000000000000000000000000000000000000000000000000000000000610f1b565b90505b60408051808201909152818152602081018690529350825b8a518110156106bd578a818151811061068557fe5b6020026020010151985085896020015114156106b557885185516106a891610eef565b85526001810193506106bd565b600101610670565b5083511561070f5773ffffffffffffffffffffffffffffffffffffffff8c1660009081526003602090815260408220805460018181018355918452928290208751600290940201928355908601519101555b506001016104c8565b50600454610726908a610eef565b60045560405173ffffffffffffffffffffffffffffffffffffffff8b16907f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d42790610771908c90611850565b60405180910390a250505050505050505050565b6003602052816000526040600020818154811061079e57fe5b600091825260209091206002909102018054600190910154909250905082565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610818903390600401611435565b60206040518083038186803b15801561083057600080fd5b505afa158015610844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086891906113f9565b8061091857506001546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba21906108c8903390600401611435565b60206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091891906113f9565b6109345760405162461bcd60e51b81526004016102c6906116dc565b61093c610f7f565b565b33600090815260036020908152604080832080548251818502810185019093528083528493606093929190859084015b828210156109b45783829060005260206000209060020201604051806040016040529081600082015481526020016001820154815250508152602001906001019061096e565b50505050905060004290506109c7611339565b60005b8351811015610a20578381815181106109df57fe5b6020026020010151915081602001518310610a08578151610a01908690610eef565b9450610a18565b8151610a15908790610eef565b95505b6001016109ca565b505050509091565b33600090815260036020526040902042610a40611339565b6000805b8454811015610acd57848181548110610a5957fe5b600091825260209182902060408051808201909152600290920201805482526001015491810182905293508410610ac0578251610a97908390610eef565b9150848181548110610aa557fe5b60009182526020822060029091020181815560010155610ac5565b610acd565b600101610a44565b50600454610adb908261100b565b600455610ae83382611033565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610b2e9190611850565b60405180910390a250505050565b60015460ff1690565b60045481565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610ba5903390600401611435565b60206040518083038186803b158015610bbd57600080fd5b505afa158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf591906113f9565b610c115760405162461bcd60e51b81526004016102c690611546565b600180547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8416908102919091179091556040517fad9400e618eb1344fde53db22397a1b82c765527ecbba3a5c86bcac15090828b90600090a250565b6001546040517fe43581b800000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890610ce1903390600401611435565b60206040518083038186803b158015610cf957600080fd5b505afa158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3191906113f9565b80610de157506001546040517f0c68ba2100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1690630c68ba2190610d91903390600401611435565b60206040518083038186803b158015610da957600080fd5b505afa158015610dbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de191906113f9565b610dfd5760405162461bcd60e51b81526004016102c6906116dc565b61093c61105b565b7f000000000000000000000000000000000000000000000000000000000000000081565b600154610100900473ffffffffffffffffffffffffffffffffffffffff1690565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb257600080fd5b505afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906113b2565b905090565b600082820183811015610f145760405162461bcd60e51b81526004016102c69061150f565b9392505050565b6000808211610f3c5760405162461bcd60e51b81526004016102c690611637565b818381610f4557fe5b049392505050565b6000808211610f6e5760405162461bcd60e51b81526004016102c6906116a5565b818381610f7757fe5b069392505050565b610f87610b3c565b610fa35760405162461bcd60e51b81526004016102c6906114d8565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610ff46110cf565b6040516110019190611435565b60405180910390a1565b60008282111561102d5760405162461bcd60e51b81526004016102c6906115a3565b50900390565b6002546110579073ffffffffffffffffffffffffffffffffffffffff1683836110d3565b5050565b611063610b3c565b156110805760405162461bcd60e51b81526004016102c69061166e565b600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ff45b3390565b6111748363a9059cbb60e01b84846040516024016110f2929190611456565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611179565b505050565b60606111db826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112159092919063ffffffff16565b80519091501561117457808060200190518101906111f991906113f9565b6111745760405162461bcd60e51b81526004016102c6906117f3565b6060611224848460008561122c565b949350505050565b60608247101561124e5760405162461bcd60e51b81526004016102c6906115da565b611257856112fa565b6112735760405162461bcd60e51b81526004016102c6906117bc565b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161129d9190611419565b60006040518083038185875af1925050503d80600081146112da576040519150601f19603f3d011682016040523d82523d6000602084013e6112df565b606091505b50915091506112ef828286611300565b979650505050505050565b3b151590565b6060831561130f575081610f14565b82511561131f5782518084602001fd5b8160405162461bcd60e51b81526004016102c69190611487565b604051806040016040528060008152602001600081525090565b50805460008255600202906000526020600020908101906113749190611377565b50565b5b808211156113925760008082556001820155600201611378565b5090565b6000602082840312156113a7578081fd5b8135610f1481611897565b6000602082840312156113c3578081fd5b8151610f1481611897565b600080604083850312156113e0578081fd5b82356113eb81611897565b946020939093013593505050565b60006020828403121561140a578081fd5b81518015158114610f14578182fd5b6000825161142b818460208701611867565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b60006020825282518060208401526114a6816040850160208701611867565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602f908201527f436f72655265663a3a6f6e6c79476f7665726e6f723a2043616c6c657220697360408201527f206e6f74206120676f7665726e6f720000000000000000000000000000000000606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526018908201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604082015260600190565b60208082526045908201527f436f72655265663a3a6f6e6c79477561726469616e4f72476f7665726e6f723a60408201527f2043616c6c6572206973206e6f74206120677561726469616e206f7220676f7660608201527f65726e6f72000000000000000000000000000000000000000000000000000000608082015260a00190565b60208082526027908201527f436f72655265663a3a6f6e6c794661726d3a2043616c6c6572206973206e6f7460408201527f2061206661726d00000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b90815260200190565b918252602082015260400190565b60005b8381101561188257818101518382015260200161186a565b83811115611891576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461137457600080fdfea26469706673582212206c53ad76e8604496e65af05c9743e9f4aa9dea1d730038d696485f53978a251a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4239,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4154,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8992,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "_core",
        "offset": 1,
        "slot": "1",
        "type": "t_contract(ICore)11517"
      },
      {
        "astId": 13693,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "vestingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3112"
      },
      {
        "astId": 13699,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "userLockedRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(LockedReward)12317_storage)dyn_storage)"
      },
      {
        "astId": 13708,
        "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
        "label": "totalLockedRewards",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LockedReward)12317_storage)dyn_storage": {
        "base": "t_struct(LockedReward)12317_storage",
        "encoding": "dynamic_array",
        "label": "struct IVestingMaster.LockedReward[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICore)11517": {
        "encoding": "inplace",
        "label": "contract ICore",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3112": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedReward)12317_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IVestingMaster.LockedReward[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedReward)12317_storage)dyn_storage"
      },
      "t_struct(LockedReward)12317_storage": {
        "encoding": "inplace",
        "label": "struct IVestingMaster.LockedReward",
        "members": [
          {
            "astId": 12314,
            "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
            "label": "locked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12316,
            "contract": "contracts/liquidity/VestingMaster.sol:VestingMaster",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}